		// Routing
const { error } = require('console');
const http = require('http');
const fs = require('fs');
const route = (path,res,status_code,type)=>{
    fs.readFile(path,(error,data)=>{
        res.writeHead(status_code,{'Content-Type':type});
        res.write(data);
        return res.end();
    });
}
const app = http.createServer((req,res)=>{
    if(req.url=='/' || req.url=='/home'){
        const path = "./html/home.html";
        const status_code = 200;
        const type = 'text/html';
        route(path,res,status_code,type);
        
    }
    else if(req.url=='/aboutUs'){
        const path = "./html/about.html";
        const status_code = 200;
        const type = 'text/html';
        route(path,res,status_code,type);
    }
    else{
        const path = "./html/notFound.html";
        const status_code = 401;
        const type = 'text/html';
        route(path,res,status_code,type);
    }
    // res.write("saklmxc");
    // res.end();
});
app.listen(4040,(error)=>{
    console.log("server is stated.....");
})


///FILE UPLODING
const { compile } = require("ejs");
const express  = require("express");
const app = express();
const mongoose = require("mongoose");
const multer = require("multer");
app.use(express.urlencoded({extended: true}));
app.use(express.json());
const fileSchema = require("./model/file");
const path = require("path");
app.use(express.static(path.join(__dirname, "./upload")));

mongoose.connect("give your own cluster")
.then(res => console.log("Database is connected...")).catch(err => console.log(err));

const mstorage = multer.diskStorage({
    destination:function(res,file,cb){
        return cb(null,"./upload")
    },
    filename:function(res,file,cb){
        return cb(null,`${Date.now()}-${file.originalname}`)
    },

})

const ffilter = (req,file,cb)=>{
    if(file.mimetype.split('/')[1]==='jpg'){
        return cb(null,true)
    }
    else{
        return cb(new Error('only jpg allowed'),false);
    }
}

const upload = multer({storage:mstorage});

app.set('view engine', 'ejs');



app.get("/boy", (req, res)=>{
    res.render("home");
});

app.get("/display", async(req, res)=>{
   try{
      const imgFile = await fileSchema.find();
      res.render("display", {file: imgFile});
   }
   catch(error)
    {
      console.log(error);
    }
});

app.post("/upload",upload.single('file_name'),async(req,res)=>{
    const newSchema = new fileSchema({
        img: req.file.filename
    });
    try{
       await newSchema.save();
       res.redirect("/display");
    }catch(error)
    {
      console.log(error);
    }
    
})
app.listen(3000, ()=>{
    console.log(`server is running port ${3000}`);
});


//mongoose
const mongoose = require("mongoose");
const fileSchema = mongoose.Schema(
    {
   img:{
    type:String,
    required: true
   }
});
module.exports = mongoose.model("File", fileSchema);

//ejs
//home 
<body>
    <h1>hello</h1>
    <form action="upload" method="POST" enctype="multipart/form-data">
        <input type="file" name="file_name">
        <button type="submit">submit</button>
    </form>
    
</body>

//display
<body>
      <div>
        <table>
            <% file.forEach((item)=>{ %>
                <img src="/<%=item.img%>" alt="img" />
            <%})%>
        </table>
      </div> 
</body>

/// TODO APP
index.js
const express = require("express");
const app =express();
const mongoose = require("mongoose");
app.set("view engine","ejs");
app.use(express.json());
app.use(express.urlencoded({extended:true}));
const PORT = 3030 || process.env.PORT;

const studentShema = require("./model/file");
mongoose.connect("own link")
.then(res=>console.log("Database Connected......")).catch(error=>console.log(error));

app.get('/',async(req,res)=>{
    const studentDetails = await studentShema.find();
    try{
        res.render("home",({studentDetails:studentDetails}));
    }
    catch(error){
        console.log(error);
    }
    
})
app.get("/addStudent",(req,res)=>{
    res.render("addStudent");
})

app.post("/addStudent",async(req,res)=>{
    const {name,course,age} = req.body;
    const newSchema = new studentShema({
        name:name,
        course:course,
        age:age
    })
    try{
        await newSchema.save();
        res.redirect('/');
    }
    catch(error){
        console.log(error);
    }
})
app.get("/deleteStudent/:id",async(req,res)=>{
    const stdId = req.params.id;
    try{
        await studentShema.findByIdAndRemove(stdId);
        res.redirect("/");
    }
    catch(error){
        console.log(error);
    }
})

app.get("/viewSingleStudent",async(req,res)=>{
    const studentDetails = await studentShema.find();
    try{
        res.render("home",({studentDetails:studentDetails}));
    }
    catch(error){
        console.log(error);
    }
})

app.get("/viewSingleStudent/:id",async(req,res)=>{
    const singleid = req.params.id;
    try{
        const student = await studentShema.findOne({_id:singleid});
        res.render("viewSingleStudent",({student:student}));
    }
    catch(error){
        console.log(error);
    }
})

app.get("/editStudent/:id",async(req,res)=>{
    const singleId = req.params.id;
    try{
        const student = await studentShema.findOne({_id:singleId});
        res.render("edit",({student:student}));
    }
    catch(error)
    {
    console.log(error);
    }
})
app.post("/update/:id",async(req,res)=>{
    const singleId = req.params.id;
    const {name,course,age} = req.body;
    const newSchema = {
        name:name,
        course:course,
        age:age
    }
    try{
        await studentShema.findByIdAndUpdate(singleId,newSchema,({new:true}));
        res.redirect("/");
    }
    catch(error){
        console.log(error);
    }
})


app.listen(PORT,(error)=>{
    console.log(`Server is running at port ${PORT}`);
})

//model
const mongoose = require("mongoose");
const studentSchema = mongoose.Schema({
    name:{type:String,required:true},
    course:{type:String,required:true},
    age:{type:String,required:true}
})
module.exports = mongoose.model("Fileee",studentSchema);

//EJS
//addStudent.ejs
<body>
    <form action="/addStudent" method="POST">
        StudentName:
        <input type="text" name="name"/><br>
        StudentCourse:
        <input type="text" name="course"/><br>
        StudentAge:
        <input type="number" name="age"><br>
        <button type="submit">Add Student</button>
    </form>
</body>

//home.ejs
<body>
    <button><a href="/addStudent">Add Student</a></button>
    <table>
        <thead>
            <tr>
                <th>Student name</th>
                <th>Student Course</th>
                <th>Student Age</th>
            </tr>
        </thead>
        <tbody >
            <%studentDetails.forEach((student)=>{%>
                <tr>
                    <td><%=student.name %></td>
                    <td><%=student.course %></td>
                    <td><%=student.age %></td>
                    <td><button><a href="deleteStudent/<%=student.id %>">Delete</a></button>
                        <button><a href="viewSingleStudent/<%=student.id %>">View</a></button>
                        <button><a href="editStudent/<%=student.id %>">Edit</a></button></td>
                </tr>
            <%})%>
        </tbody>
    </table>
</body>

//edit.ejs
<body>
    <h1>Edit Details</h1>
    <form action="/update/<%=student.id %>" method="POST">
        StudentName: <input type="text" name="name" value="<%=student.name%>"><br>
        StudentCourse: <input type="text" name="course" value="<%=student.course%>"><br>
        StudentAge: <input type="number" name="age" value="<%=student.age%>"><br>

        <button type="submit">Update Details</button>

    </form>
</body>

//viewSingleStudent.ejs
<body>
    <table>
        <thead>
            <th>Name </th>
            <th>Course</th>
            <th>Age</th>
        </thead>
        <tbody>
            <td><%=student.name %></td>
            <td><%=student.course %></td>
            <td><%=student.age %></td>

        </tbody>
    </table>
    <button type="submit"><a href="/viewSingleStudent">View All Student Details</a></button>
</body>


//login and signup auth
const express = require("express");
const cookieParser = require("cookie-parser");
const app = express();
require("dotenv").config();
const session = require("express-session");
const PORT = process.env.PORT || 8000;
const path = require("path");
const ejs = require("ejs");
const mongoose=require("mongoose");
const userSchema=require("./modules/user");
const bcrypt=require("bcrypt");
app.use(express.urlencoded({extended:false}))
app.use(express.json());

/**
 * Middleware
 */
app.use(express.json());
app.set("view engine", "ejs");
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));
app.use(express.urlencoded({ extended: false }));
app.use(
  session({
    secret: "!@*#$(&!#my_secret_()*$!@01293",
    resave: false,
    saveUninitialized: false,
    cookie: { maxAge: 24 * 60 * 60 * 1000 },
  })
);

app.get("/", (req, res) => {
  res.render("home");
});

/**
 * Login
 */
app.get("/login", (req, res) => {
  res.render("login");
});
app.post("/login",async (req, res) => {
  const { username, password } = req.body;
  try {
    
    const existuser=await userSchema.findOne({username:username});
    if(!existuser){
      res.status(400).json({error:"user not found"})
    }
    const matchpassword=await bcrypt.compare(password,existuser.password);
    if(!matchpassword){
      res.status(400).json({error:"invalid password"})
    }
    req.session.isAuth = true;
    let time=3600000;
    res.cookie("user",existuser._id,{
      expires:new Date(Date.now()+time),
      httpOnly:true
    })
    res.redirect(`/dashboard`);
  } catch (error) {
    console.log(error);
  }
});

/**
 * Register
 */
app.get("/register", (req, res) => {
  res.render("register");
});
app.post("/register",async (req, res) => {
  let data=req.body;
  console.log(data);
  const userExist=await userSchema.findOne({username:data.username});
  try {
    if(userExist){
      res.status(200).json({error:"user found"})
    }else{
      const hashpassword=await bcrypt.hash(data.password,10);
      const result=await userSchema.create({
        username:data.username,
        password:hashpassword
      })
      console.log(result);
      req.session.isAuth = true;
      let time=3600000;
      res.cookie("user",result._id,{
      expires:new Date(Date.now()+time),
      httpOnly:true
    })
    res.redirect(`/dashboard`);
    }
  } catch (error) {
     console.log(error);
  }
  
});

/**
 * Dashboard
 */

function isAuth(req, res, next) {
  if (req.session.isAuth) {
    next();
  } else res.redirect("/login");
}

app.get("/dashboard", isAuth, async(req, res) => {
  //console.log(req.cookies.user);
  let data=await userSchema.findOne({_id:req.cookies.user})
  res.render("dashboard",{
    userName:data.username
  });
});

/**
 * Logout
 */

app.get("/logout", (req, res) => {
  req.session.isAuth = false;
  res.clearCookie("user");
  res.redirect("/login");
});
app.get("/delete/:id", async(req,res)=>{
    
  let data=await userSchema.findByIdAndRemove(req.params.id);
   res.redirect("/");
})

mongoose.connect('own link').then(()=>{
  app.listen(PORT, (err) => {
    if (err) console.log(`Error listening on ${PORT}`);
    else console.log(`Servers started on port  http://localhost:${PORT}`);
  });
  
}).catch((error)=>{
  console.log(error);
})


//module user.js
const mongoose=require("mongoose");

const userSchema=new mongoose.Schema({
    username:{
        type:String,
        require:true
    },
    password:{
        type:String,
        require:true
    }
},{timestamps:true});

module.exports=mongoose.model("User",userSchema);

//view all ejs
home.ejs
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
  </head>
  <body>
    <a href="/dashboard">dashboard</a>
    <a href="/register">register</a>
    <a href="/login">Login</a>
  </body>
</html>


//dashboard.ejs
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
  </head>
  <body>
    <a href="/logout">logout</a>
    <a href="/delete>">Account Delete</a>
    <br />
    <p><%= userName %></p>
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Eligendi numquam
  </body>
</html>

//login.ejs
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
  </head>
  <body>
    <form action="/login" method="post">
      username:
      <input type="text" name="username" required />
      password:
      <input type="password" name="password" required />
      <input type="submit" value="submit" />
    </form>
  </body>
</html>

//register.ejs
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
  </head>
  <body>
    <form action="/register" method="post">
      username:
      <input type="text" name="username" required />
      password:
      <input type="password" name="password" required />
      <input type="submit" value="submit" />
    </form>
  </body>
</html>


///LOGIN AND SIGNUP JWT
src/index.js
const express=require ("express");
const app=express();
const session = require('express-session')
const userApp=require("../src/routes/userRoute");
const mongoose=require("mongoose")
const cookieParser=require("cookie-parser")
app.use(express.urlencoded({extended:false}))
app.use(express.json());
app.use(session(
    {
        secret : "12io31212u38912731208uiojwkedfs)(&*#$(#@",
        saveUninitialized : true,
        resave : true,
        cookie : {maxAge : 24 * 60 * 60 * 1000}
    }
))
app.use(cookieParser());
app.set("view engine","ejs");


app.use(userApp);
mongoose.connect("url").then(()=>{
    app.listen(5000,()=>{
        console.log("Server running on 5000");
    })
}).catch((err)=>{
    console.log(err);
})


//src/route/userRoute.js

const express=require("express");
const {signup,login,logout}=require("../../controllers/user")
const auth=require("../../middleware/auth")
const userApp=express();

userApp.get("/",(req,res)=>{
    res.render("Home");
})
userApp.get("/Profile",auth,(req,res)=>{
    res.render("profile");
})
userApp.get("/about",(req,res)=>{
    res.render("profile");
})
userApp.get("/signup",(req,res)=>{
    res.render("signup");
})
userApp.get("/login",(req,res)=>{
    res.render("login");
})
userApp.get("/logout",logout)
userApp.post("/signup",signup);
userApp.post("/login",login);
module.exports=userApp;


//src/module/user.js

const mongoose=require("mongoose");

const userSchema=new mongoose.Schema({
    username:{
        type:String,
        require:true
    },
    email:{
        type:String,
        require:true
    },
    password:{
        type:String,
        require:true
    }
},{timestamps:true});

module.exports=mongoose.model("User",userSchema);

//middleware/auth.js
const jwt=require("jsonwebtoken");
const SecretKey="SIBAJIT";

const auth=(req,res,next)=>{

    try {
        let token=req.session.token;
        if(token){
            let user=jwt.verify(token,SecretKey);
            console.log(user);
            req.userId=user.id
            next();
        }else{
            return   res.status(401).json({error:"Unuthorized user"})
        }
    } catch (error) {
        console.log(error);
        res.status(401).json({error:"something wrong"})
    }
}

module.exports=auth;


//controller/user.js

const usermodule=require("../src/module/userSchema");
const jwt=require("jsonwebtoken");
const bcrypt=require("bcrypt")
const SecretKey="asasas";

const signup=async (req,res)=>{
    let data=await req.body
   try{
       const userexist=await usermodule.findOne({email:data.email});
       if(userexist){
           console.log("user exist");
       }
       
       else{
        const hashPassword=await bcrypt.hash(data.password,10);
           let result=await usermodule.create({
               username:data.username,
               email:data.email,
               password:hashPassword
           })
           
           const token=jwt.sign({email:result.email,id:result._id},SecretKey,{expiresIn:"1h"});
           res.cookie('token',token,{
               httpOnly:true
           })
           res.redirect("/");
       }
    
    

   }catch(error){
     console.log(error);
   }
}
const login=async (req,res)=>{
    const data=req.body;
    try {
        const userexist=await usermodule.findOne({email:data.email});
        if(!userexist){
           return res.status(400).json({error:"user not found"});
        }
        const matchpassword=await bcrypt.compare(data.password,userexist.password);
        if(!matchpassword){
            return res.status(401).json({error:"Invalid Password"})
        }
        const token=jwt.sign({email:userexist.email,id:userexist._id},SecretKey,{expiresIn:"1h"})
        // console.log(token);
        req.session.token = token;
        res.redirect("/");
        
    } catch (error) {
        return res.status(401).json({error:"somethings wrong"})
    }
}
const logout=(req,res)=>{
    req.session.destroy((err)=>{
        if(err){
            console.log(err);
        }else{
            res.redirect("/");
        }
    })
}

module.exports={signup,login,logout};



//views/home.ejs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <title>Document</title>
</head>
<body>
    
      <nav class="nav">
        <a class="nav-link active" aria-current="page" href="/">Home</a>
        <a class="nav-link" href="/login">Login</a>
              <a class="nav-link" href="/logout">Logout</a>
              <a class="nav-link" href="/signup">SignUp</a>
              <a class="nav-link" href="/profile">Profile</a>
      </nav>
 <p>Google LLC (/ˈɡuːɡəl/ (listen)) is an American multinational technology company focusing on artificial intelligence,[9] online advertising, search engine technology, cloud computing, computer software,</p>
<%- include('layout/Fotter') %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
</body>
</html>

//login.ejs

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <title>Document</title>
</head>
<body>
    
      <nav class="nav">
        <a class="nav-link active" aria-current="page" href="/">Home</a>
        <a class="nav-link" href="/login">Login</a>
              <a class="nav-link" href="/logout">Logout</a>
              <a class="nav-link" href="/signup">SignUp</a>
              <a class="nav-link" href="/profile">Profile</a>
      </nav>
 <form action="/login" method="post">
    <br><input type="email" name="email" placeholder="Enter Email" value="ret@gmail.com"><br>
    <br><input type="text" name="password" placeholder="Password" value="ret"><br>
   <br> <button type="submit" name="submit" value="Add user" class="btn btn-primary">Submit</button>
 </form>
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
</body>
</html>

//profile.ejs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <title>Document</title>
</head>
<body>
    
      <nav class="nav">
        <a class="nav-link active" aria-current="page" href="/">Home</a>
        <a class="nav-link" href="/login">Login</a>
              <a class="nav-link" href="/logout">Logout</a>
              <a class="nav-link" href="/signup">SignUp</a>
              <a class="nav-link" href="/profile">Profile</a>
      </nav>
 <div>
     <h1>Profile</h1>
 </div>
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
</body>
</html>

//signup.ejs

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <title>Document</title>
</head>
<body>
    
      <nav class="nav">
        <a class="nav-link active" aria-current="page" href="/">Home</a>
        <a class="nav-link" href="/login">Login</a>
              <a class="nav-link" href="/logout">Logout</a>
              <a class="nav-link" href="/signup">SignUp</a>
              <a class="nav-link" href="/profile">Profile</a>
      </nav>
 <form action="/signup" method="post">
    <input type="text" name="username" placeholder="Enter Name"><br>
    <br><input type="email" name="email" placeholder="Enter Email"><br>
    <br><input type="text" name="password" placeholder="Password"><br>
   <br> <button type="submit" name="submit" value="Add user" class="btn btn-primary">Submit</button>
 </form>
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
</body>
</html>
	
